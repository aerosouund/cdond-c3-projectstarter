version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/3yfxqrxiUbHC7JsDyQVhMj/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
                npm i
                npm run migration:revert
            fi


node_image: &node_image
  docker:
    - image: circleci/node:13.8.0

aws_cli: &aws_cli
  docker:
    - image: amazon/aws-cli

alpine: &alpine
  docker:
    - image: python:3.7-alpine3.11

            
jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          working_directory: ./frontend
          command: |
            npm i
            npm run build      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          working_directory: ./backend
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:  
          working_directory: ./frontend    
          command: |
            npm i
            npm run test           
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          working_directory: ./backend
          command: |
            npm i
            npm run test
            
  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - run:
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          working_directory: ./backend
          command:
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws_cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacityBackend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              
      - run:
          name: deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacityfrontEnd \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udacityBackend" \
            --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    <<: *alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1c:58:c6:32:9b:75:69:70:7d:b3:79:62:6d:72:e5:d9"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory configure-server.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    <<: *node_image
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm i
            npm run migrations > migrations-log
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations-log
            then
                curl -i https://kvdb.io/3yfxqrxiUbHC7JsDyQVhMj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    <<: *node_image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o 'awscliv2.zip'
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udacityBackend" \
            --output text)
            curl --insecure https://kvdb.io/3yfxqrxiUbHC7JsDyQVhMj/BACKEND_IP -d "http://${BACKEND_IP}:3030"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo ${API_URL} >> .env
            cat .env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    <<: *alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:1e:ed:36:12:30:81:b4:58:35:ae:2a:71:e1:8a:47"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl npm nodejs tar rsync openssh
            pip install awscli
            aws --version
      - run:
          name: install backend
          working_directory: ./backend
          command: |
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: run ansible playbook
          working_directory: .circleci/ansible
          command: |
              cat inventory
              ansible-playbook -i inventory deploy-backend.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    <<: *alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and smoke test
          command: |
            export BACKEND_IP=$(curl --insecure https://kvdb.io/3yfxqrxiUbHC7JsDyQVhMj/BACKEND_IP)
            echo $BACKEND_IP
            curl "$BACKEND_IP/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                return 1
            else
                return 1
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    <<: *aws_cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}

cleanup:
    <<: *alpine
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend
      